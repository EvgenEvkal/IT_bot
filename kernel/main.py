import telebot
import sqlite3
import os
import datetime
import json
from telebot import types
from typing import Optional, Tuple, List, Dict, Union
import api
global API_TOKEN , DEV_ID , CHANNEL_ID , WORKS_FOLDER , DB_NAME
API_TOKEN = api.TOKEN
DEV_ID = api.DEV_ID
CHANNEL_ID = api.CHANNEL_ID
bot = telebot.TeleBot(API_TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
WORKS_FOLDER = api.WORKS_FOLDER
DB_NAME = api.DB_NAME
os.makedirs(WORKS_FOLDER, exist_ok=True)

# –ö–ª–∞—Å—Å—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
class User:
    def __init__(self, user_id: int, username: str, full_name: str, role: str, class_name: str, is_blocked: bool):
        self.user_id = user_id
        self.username = username
        self.full_name = full_name
        self.role = role
        self.class_name = class_name
        self.is_blocked = is_blocked

class Work:
    def __init__(self, work_id: int, user_id: int, file_path: str, status: str, created_at: str, teacher_comment: str):
        self.work_id = work_id
        self.user_id = user_id
        self.file_path = file_path
        self.status = status
        self.created_at = created_at
        self.teacher_comment = teacher_comment

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã –≤ –∫–ª–∞—Å—Å Report
class Report:
    def __init__(self, report_id: int, user_id: int, text: str, status: str, response: str, created_at: str):
        self.report_id = report_id
        self.user_id = user_id
        self.text = text
        self.status = status  # '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ', '–í —Ä–∞–±–æ—Ç–µ', '–†–µ—à–µ–Ω–æ', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
        self.response = response
        self.created_at = created_at
def change_report_status(call: types.CallbackQuery, report_id: int):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤.")
        return
    markup = types.InlineKeyboardMarkup(row_width=1)
    statuses = ["–í —Ä–∞–±–æ—Ç–µ", "–†–µ—à–µ–Ω–æ", "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"]
    for status in statuses:
        markup.add(types.InlineKeyboardButton(status, callback_data=f"set_report_status_{report_id}_{status}"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"report_detail_{report_id}"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
                         chat_id=user_id,
                         message_id=call.message.message_id,
                         reply_markup=markup)
class TaskManager:
    def __init__(self, user_id: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏–π.
        
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É—á–∏—Ç–µ–ª—è –∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞).
        """
        self.user_id = user_id
        self.cursor = conn.cursor()

    def get_all_tasks(self) -> List[Tuple]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

        :return: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ (task_id, title, description, status).
        """
        try:
            self.cursor.execute("SELECT task_id, title, description, status FROM tasks")
            return self.cursor.fetchall()
        except Exception as e:
            print(f"Error getting tasks: {e}")
            return []

    def create_task(self, title: str, description: str) -> Tuple[bool, str]:
        """
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.

        :param title: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.
        :param description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ (—É—Å–ø–µ—Ö/–æ—à–∏–±–∫–∞) –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        if not check_access(self.user_id, '—É—á–∏—Ç–µ–ª—å'):
            return False, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π."
        try:
            self.cursor.execute(
                "INSERT INTO tasks (title, description, status) VALUES (?, ?, ?)",
                (title, description, 'active')
            )
            conn.commit()
            return True, "‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ."
        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {str(e)}"

    def delete_task(self, task_id: int) -> Tuple[bool, str]:
        """
        –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID.

        :param task_id: ID –∑–∞–¥–∞–Ω–∏—è.
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ (—É—Å–ø–µ—Ö/–æ—à–∏–±–∫–∞) –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        if not check_access(self.user_id, '—É—á–∏—Ç–µ–ª—å'):
            return False, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π."
        try:
            self.cursor.execute("DELETE FROM tasks WHERE task_id = ?", (task_id,))
            conn.commit()
            return True, f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ."
        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {str(e)}"

    def change_task_status(self, task_id: int, new_status: str) -> Tuple[bool, str]:
        """
        –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è.

        :param task_id: ID –∑–∞–¥–∞–Ω–∏—è.
        :param new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å ('active', 'closed').
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ (—É—Å–ø–µ—Ö/–æ—à–∏–±–∫–∞) –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        if not check_access(self.user_id, '—É—á–∏—Ç–µ–ª—å'):
            return False, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏–π."
        try:
            self.cursor.execute("UPDATE tasks SET status = ? WHERE task_id = ?", (new_status, task_id))
            conn.commit()
            return True, f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è #{task_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'."
        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è: {str(e)}"

    def view_active_tasks(self) -> List[Tuple]:
        """
        –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.

        :return: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ (task_id, title, description).
        """
        try:
            self.cursor.execute("SELECT task_id, title, description FROM tasks WHERE status = 'active'")
            return self.cursor.fetchall()
        except Exception as e:
            print(f"Error viewing active tasks: {e}")
            return []

    def view_closed_tasks(self) -> List[Tuple]:
        """
        –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π.

        :return: –°–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ (task_id, title, description).
        """
        try:
            self.cursor.execute("SELECT task_id, title, description FROM tasks WHERE status = 'closed'")
            return self.cursor.fetchall()
        except Exception as e:
            print(f"Error viewing closed tasks: {e}")
            return []

    def check_task_answers(self, task_id: int) -> List[Tuple]:
        """
        –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≤–µ—Ç–æ–≤ —É—á–µ–Ω–∏–∫–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.

        :param task_id: ID –∑–∞–¥–∞–Ω–∏—è.
        :return: –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (full_name, answer_text, file_path, status).
        """
        try:
            self.cursor.execute("""
                SELECT u.full_name, a.answer_text, a.file_path, a.status 
                FROM answers a
                JOIN users u ON a.user_id = u.user_id
                WHERE a.task_id = ?
            """, (task_id,))
            return self.cursor.fetchall()
        except Exception as e:
            print(f"Error checking task answers: {e}")
            return []
@bot.callback_query_handler(func=lambda call: call.data == 'view_new_tasks')
def view_new_tasks(call: types.CallbackQuery):
    user_id = call.from_user.id
    manager = TaskManager(user_id)
    tasks = manager.view_active_tasks()
    if not tasks:
        bot.send_message(user_id, "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    message = "üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π:\n"
    for task in tasks:
        task_id, title, description = task
        message += f"- #{task_id}: {title}\n{description}\n"

    bot.send_message(user_id, message, reply_markup=student_task_actions_markup(tasks))
@bot.callback_query_handler(func=lambda call: call.data == 'view_old_tasks')
def view_old_tasks(call: types.CallbackQuery):
    user_id = call.from_user.id
    manager = TaskManager(user_id)
    tasks = manager.view_closed_tasks()
    if not tasks:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    message = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π:\n"
    for task in tasks:
        task_id, title, description = task
        message += f"- #{task_id}: {title}\n{description}\n"

    bot.send_message(user_id, message, reply_markup=teacher_task_actions_markup())
@bot.callback_query_handler(func=lambda call: call.data == 'create_task')
def create_task(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π.")
        return

    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_task_title)
def process_task_title(message: types.Message):
    user_id = message.from_user.id
    title = message.text.strip()
    if not title or len(title) < 5:
        msg = bot.send_message(user_id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
        bot.register_next_step_handler(msg, process_task_title)
        return

    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    bot.register_next_step_handler(msg, lambda m: process_task_description(m, title))
def process_task_description(message: types.Message, title: str):
    user_id = message.from_user.id
    description = message.text.strip()
    if not description or len(description) < 10:
        msg = bot.send_message(user_id, "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
        bot.register_next_step_handler(msg, lambda m: process_task_description(m, title))
        return

    manager = TaskManager(user_id)
    success, result = manager.create_task(title, description)
    bot.send_message(user_id, result, reply_markup=teacher_tasks_menu_markup())
@bot.callback_query_handler(func=lambda call: call.data == 'teacher_tasks')
def teacher_tasks_menu(call: types.CallbackQuery):
    user_id = call.from_user.id
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton("üìã –ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="view_new_tasks"),
        types.InlineKeyboardButton("üìö –ü—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="view_old_tasks"),
        types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="create_task") if check_access(user_id, '—É—á–∏—Ç–µ–ª—å') else None,
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="teacher_panel")
    ]
    markup.add(*[b for b in buttons if b])
    bot.edit_message_text("üìö –ú–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π:", chat_id=user_id, message_id=call.message.message_id, reply_markup=markup)
@bot.callback_query_handler(func=lambda call: call.data.startswith('close_task_'))
def close_task(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞–Ω–∏–π.")
        return

    try:
        task_id = int(call.data.split('_')[2])
    except (ValueError, IndexError):
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞–Ω–∏—è.")
        return

    manager = TaskManager(user_id)
    success, result = manager.change_task_status(task_id, 'closed')
    bot.send_message(user_id, result, reply_markup=teacher_tasks_menu_markup())
@bot.callback_query_handler(func=lambda call: call.data.startswith('view_answers_'))
def view_answers(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≤–µ—Ç–æ–≤.")
        return

    try:
        task_id = int(call.data.split('_')[2])
    except (ValueError, IndexError):
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤.")
        return

    manager = TaskManager(user_id)
    answers = manager.check_task_answers(task_id)
    if not answers:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ #{task_id}.")
        return

    message = f"üìã –û—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ #{task_id}:\n"
    for full_name, answer_text, file_path, status in answers:
        if answer_text:
            answer_info = answer_text[:20] + "..." if len(answer_text) > 20 else answer_text
        elif file_path:
            answer_info = "–§–∞–π–ª –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
        else:
            answer_info = "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
        message += (
            f"- –£—á–µ–Ω–∏–∫: {full_name}\n"
            f"–û—Ç–≤–µ—Ç: {answer_info}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
        )

    bot.send_message(user_id, message, reply_markup=teacher_task_actions_markup(task_id))

def teacher_panel_markup() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üìö –ó–∞–¥–∞–Ω–∏—è", callback_data="teacher_tasks"),
        types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="create_task_menu"),
        types.InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤", callback_data="student_list"),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤", callback_data="student_stats"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    ]
    markup.add(*buttons)
    return markup
# –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == 'student_list')
def student_list(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    cursor.execute("""
        SELECT u.user_id, u.full_name, u.class, COUNT(w.work_id) AS total_works
        FROM users u
        LEFT JOIN works w ON u.user_id = w.user_id
        WHERE u.role = '—É—á–µ–Ω–∏–∫'
        GROUP BY u.user_id
        ORDER BY u.class, u.full_name
    """)
    students = cursor.fetchall()
    
    if not students:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.")
        return
    
    message = "üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n"
    for student in students:
        user_id, full_name, class_name, total_works = student
        message += f"- {full_name} ({class_name}) | –†–∞–±–æ—Ç: {total_works}\n"
    
    bot.send_message(user_id, message, reply_markup=teacher_panel_markup())

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == 'student_stats')
def student_stats(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    cursor.execute("""
        SELECT u.user_id, u.full_name, u.class,
               SUM(CASE WHEN w.status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ' THEN 1 ELSE 0 END) AS checked,
               SUM(CASE WHEN w.status = '–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏' THEN 1 ELSE 0 END) AS redo,
               SUM(CASE WHEN w.status = '–£–¥–∞–ª–µ–Ω–æ' THEN 1 ELSE 0 END) AS deleted
        FROM users u
        LEFT JOIN works w ON u.user_id = w.user_id
        WHERE u.role = '—É—á–µ–Ω–∏–∫'
        GROUP BY u.user_id
        ORDER BY u.class, u.full_name
    """)
    stats = cursor.fetchall()
    
    if not stats:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–±–æ—Ç–µ —É—á–µ–Ω–∏–∫–æ–≤.")
        return
    
    message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤:\n"
    for stat in stats:
        user_id, full_name, class_name, checked, redo, deleted = stat
        message += (
            f"- {full_name} ({class_name}):\n"
            f"  –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked or 0}\n"
            f"  –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏: {redo or 0}\n"
            f"  –£–¥–∞–ª–µ–Ω–æ: {deleted or 0}\n\n"
        )
    
    bot.send_message(user_id, message, reply_markup=teacher_panel_markup())

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞—Ç—É—Å–æ–≤ —Ä–∞–±–æ—Ç
@bot.callback_query_handler(func=lambda call: call.data.startswith('set_status_'))
def process_status_change(call: types.CallbackQuery):
    user_id = call.from_user.id
    try:
        _, _, work_id, new_status = call.data.split('_', 3)
        work_id = int(work_id)
        
        cursor.execute("SELECT file_path, status FROM works WHERE work_id = ?", (work_id,))
        current_file_path, current_status = cursor.fetchone()
        
        if current_status == new_status:
            bot.send_message(user_id, f"‚ùå –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã #{work_id} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ '{new_status}'.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É
        status_folders = {
            '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ': 'checked',
            '–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏': 'redo',
            '–£–¥–∞–ª–µ–Ω–æ': 'deleted'
        }
        
        if new_status not in status_folders:
            bot.send_message(user_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        new_folder = os.path.join(WORKS_FOLDER, status_folders[new_status])
        os.makedirs(new_folder, exist_ok=True)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
        new_file_name = os.path.basename(current_file_path)
        new_file_path = os.path.join(new_folder, new_file_name)
        os.rename(current_file_path, new_file_path)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            "UPDATE works SET status = ?, file_path = ? WHERE work_id = ?",
            (new_status, new_file_path, work_id)
        )
        conn.commit()
        
        bot.send_message(user_id, f"‚úÖ –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã #{work_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'")
        show_work_details(call, work_id)
        
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ä–∞–±–æ—á–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu_markup(user_id: int) -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üìö –ó–∞–¥–∞–Ω–∏—è", callback_data="tasks_menu"),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics"),
        types.InlineKeyboardButton("üìÇ –†–∞–±–æ—Ç—ã", callback_data="works"),
        types.InlineKeyboardButton("üì® –†–µ–ø–æ—Ä—Ç—ã", callback_data="reports"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")
    ]
    
    if check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        buttons.append(types.InlineKeyboardButton("üë®‚Äçüè´ –ü–∞–Ω–µ–ª—å —É—á–∏—Ç–µ–ª—è", callback_data="teacher_panel"))
    
    if check_access(user_id, '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):
        buttons.append(types.InlineKeyboardButton("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", callback_data="dev_panel"))
    
    markup.add(*buttons)
    return markup

# –ú–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π
@bot.callback_query_handler(func=lambda call: call.data == 'tasks_menu')
def tasks_menu(call: types.CallbackQuery):
    user_id = call.from_user.id
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    buttons = [
        types.InlineKeyboardButton("üìã –ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="view_new_tasks"),
        types.InlineKeyboardButton("üìö –ü—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="view_old_tasks"),
        types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="create_task") if check_access(user_id, '—É—á–∏—Ç–µ–ª—å') else None,
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    ]
    
    markup.add(*[b for b in buttons if b])
    bot.edit_message_text("üìö –ú–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π:", chat_id=user_id, message_id=call.message.message_id, reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä–∞–±–æ—Ç—ã
def show_work_details(call: types.CallbackQuery, work_id: int):
    user_id = call.from_user.id
    cursor.execute("""
        SELECT w.work_id, u.full_name, w.file_path, w.status, w.created_at 
        FROM works w 
        JOIN users u ON w.user_id = u.user_id 
        WHERE w.work_id = ?
    """, (work_id,))
    result = cursor.fetchone()
    
    if not result:
        bot.send_message(user_id, "‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    work_id, full_name, file_path, status, created_at = result
    file_name = os.path.basename(file_path)
    
    message = (
        f"üìã –î–µ—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç—ã #{work_id}:\n"
        f"- –ê–≤—Ç–æ—Ä: {full_name}\n"
        f"- –§–∞–π–ª: {file_name}\n"
        f"- –°—Ç–∞—Ç—É—Å: {status}\n"
        f"- –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {created_at}\n"
    )
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", callback_data=f"download_{work_id}"),
        types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{work_id}"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="view_works")
    ]
    markup.add(*buttons)
    
    bot.edit_message_text(message, chat_id=user_id, message_id=call.message.message_id, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('change_status_'))
def change_work_status(call: types.CallbackQuery):
    user_id = call.from_user.id
    try:
        _, _, work_id = call.data.split('_')
        work_id = int(work_id)
        
        cursor.execute("SELECT status FROM works WHERE work_id = ?", (work_id,))
        current_status = cursor.fetchone()[0]
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        statuses = ['–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ', '–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏', '–£–¥–∞–ª–µ–Ω–æ']
        
        for status in statuses:
            if status != current_status:
                markup.add(types.InlineKeyboardButton(status, callback_data=f"set_status_{work_id}_{status}"))
        
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"work_detail_{work_id}"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", chat_id=user_id, message_id=call.message.message_id, reply_markup=markup)
        
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('set_report_status_'))
def process_report_status_change(call: types.CallbackQuery):
    user_id = call.from_user.id
    _, _, report_id, new_status = call.data.split('_', 3)
    report_id = int(report_id)
    cursor = conn.cursor()
    cursor.execute("UPDATE reports SET status = ? WHERE report_id = ?", (new_status, report_id))
    conn.commit()
    bot.send_message(user_id, f"‚úÖ –°—Ç–∞—Ç—É—Å —Ä–µ–ø–æ—Ä—Ç–∞ #{report_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'")
    show_report_details(call, report_id)
@bot.callback_query_handler(func=lambda call: call.data.startswith('add_response_'))
def add_response(call: types.CallbackQuery):
    user_id = call.from_user.id
    report_id = int(call.data.split("_")[2])
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–ø–æ—Ä—Ç:")
    bot.register_next_step_handler(msg, lambda m: process_add_response(m, report_id))

def process_add_response(message, report_id):
    user_id = message.from_user.id
    response = message.text.strip()
    cursor.execute("UPDATE reports SET response = ? WHERE report_id = ?", (response, report_id))
    conn.commit()
    bot.send_message(user_id, "‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
def show_report_details(call: types.CallbackQuery, report_id: int):
    user_id = call.from_user.id
    cursor = conn.cursor()
    cursor.execute("""
        SELECT r.report_id, r.text, r.status, r.response, r.created_at, u.full_name 
        FROM reports r
        JOIN users u ON r.user_id = u.user_id
        WHERE r.report_id = ?
    """, (report_id,))
    report = cursor.fetchone()
    if not report:
        bot.send_message(user_id, "‚ùå –†–µ–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    report_id, text, status, response, created_at, student_name = report
    message = (
        f"üìù –†–µ–ø–æ—Ä—Ç #<b>{report_id}</b>"
        f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: <b>{student_name}</b>"
        f"üìù –¢–µ–∫—Å—Ç: <i>{text}</i>"
        f"üîÑ –°—Ç–∞—Ç—É—Å: <b>{status}</b>"
        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <i>{created_at}</i>"
    )
    if response:
        message += f"‚ùóÔ∏è –û—Ç–≤–µ—Ç: <i>{response}</i>"
    user = get_user(user_id)
    bot.edit_message_text(
        message,
        chat_id=user_id,
        message_id=call.message.message_id,
        parse_mode='HTML',
        reply_markup=report_detail_markup(report_id, user.role)
    )

def report_detail_markup(report_id: int, user_role: str) -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup()
    if user_role in ['—É—á–∏—Ç–µ–ª—å', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫']:
        markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_report_status_{report_id}"))
        markup.add(types.InlineKeyboardButton("üí¨ –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"add_response_{report_id}"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reports"))
    return markup

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_NAME, check_same_thread=False)
    global cursor 
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            full_name TEXT NOT NULL,
            role TEXT DEFAULT '—É—á–µ–Ω–∏–∫',
            class TEXT,
            is_blocked BOOLEAN DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞–±–æ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS works (
            work_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            file_path TEXT NOT NULL,
            status TEXT DEFAULT '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            teacher_comment TEXT,
            FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reports (
            report_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            text TEXT NOT NULL,
            status TEXT DEFAULT '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ',
            response TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∞—Å—Å–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS classes (
            class_id INTEGER PRIMARY KEY AUTOINCREMENT,
            class_name TEXT UNIQUE NOT NULL
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            task_id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT NOT NULL,
            status TEXT DEFAULT 'active',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–≤–µ—Ç–æ–≤ —É—á–µ–Ω–∏–∫–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS answers (
            answer_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            task_id INTEGER NOT NULL,
            answer_text TEXT,
            file_path TEXT,
            status TEXT DEFAULT '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            teacher_comment TEXT,
            FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
            FOREIGN KEY (task_id) REFERENCES tasks(task_id) ON DELETE CASCADE
        )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
    cursor.execute("""
        INSERT OR IGNORE INTO users (user_id, username, full_name, role, class)
        VALUES (?, ?, ?, ?, ?)
    """, (api.DEV_ID, "–ï–≤–≥–µ–Ω–∏–π", "–í–µ—Ä—à–∏–Ω–∏–Ω", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "9–ê"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    default_classes = api.CLASS_LIST
    for class_name in default_classes:
        cursor.execute("INSERT OR IGNORE INTO classes (class_name) VALUES (?)", (class_name,))
    
    conn.commit()
    return conn

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
conn = init_db()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_user(user_id: int) -> Optional[User]:
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, username, full_name, role, class, is_blocked FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    return User(*row) if row else None

def is_user_blocked(user_id: int) -> bool:
    cursor = conn.cursor()
    cursor.execute("SELECT is_blocked FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone()[0] == 1

def check_access(user_id: int, required_role: str) -> bool:
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        return False
    return user[0] == required_role or user[0] == '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
def move_file_to_status_folder(file_path: str, new_status: str) -> str:
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–º—É —Å—Ç–∞—Ç—É—Å—É."""
    status_folders = {
        '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ': 'checked',
        '–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏': 'redo',
        '–£–¥–∞–ª–µ–Ω–æ': 'deleted'
    }

    if new_status not in status_folders:
        print(f"Error: Invalid status {new_status}")
        return file_path

    base_name = os.path.basename(file_path)
    new_folder = os.path.join(WORKS_FOLDER, status_folders[new_status])
    os.makedirs(new_folder, exist_ok=True)
    new_path = os.path.join(new_folder, base_name)

    try:
        os.rename(file_path, new_path)
        return new_path
    except OSError as e:
        print(f"Error moving file: {e}")
        return file_path

def get_current_datetime() -> str:
    return datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message: types.Message):
    user_id = message.from_user.id
    
    if is_user_blocked(user_id):
        bot.send_message(user_id, "‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    user = get_user(user_id)
    
    if not user:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        msg = bot.send_message(user_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
        bot.register_next_step_handler(msg, process_full_name_step)
    else:
        bot.send_message(user_id, f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {user.full_name}!", 
                         reply_markup=main_menu_markup(user_id))

def process_full_name_step(message: types.Message):
    user_id = message.from_user.id
    full_name = message.text.strip()
    
    if len(full_name.split()) < 2:
        msg = bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        bot.register_next_step_handler(msg, process_full_name_step)
        return
    
    cursor = conn.cursor()
    cursor.execute("INSERT INTO users (user_id, username, full_name) VALUES (?, ?, ?)", 
                  (user_id, message.from_user.username, full_name))
    conn.commit()
    
    bot.send_message(user_id, "üè´ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:", reply_markup=classes_markup())

@bot.callback_query_handler(func=lambda call: call.data.startswith('select_class_'))
def process_class_selection(call: types.CallbackQuery):
    user_id = call.from_user.id
    class_name = call.data.split('_')[2]
    
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET class = ? WHERE user_id = ?", (class_name, user_id))
    conn.commit()
    
    bot.edit_message_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å {class_name}. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", 
                         chat_id=user_id, 
                         message_id=call.message.message_id)
    bot.send_message(user_id, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_markup(user_id))

# –ú–µ–Ω—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def classes_markup() -> types.InlineKeyboardMarkup:
    cursor = conn.cursor()
    cursor.execute("SELECT class_name FROM classes ORDER BY class_name")
    classes = cursor.fetchall()
    
    markup = types.InlineKeyboardMarkup()
    for class_name in classes:
        markup.add(types.InlineKeyboardButton(class_name[0], callback_data=f"select_class_{class_name[0]}"))
    return markup
@bot.callback_query_handler(func=lambda call: call.data == 'teacher_panel')
def show_teacher_panel(call: types.CallbackQuery):
    user_id = call.from_user.id
    user = get_user(user_id)
    
    if not user:
        bot.send_message(user_id, "‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.")
        return
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —É—á–∏—Ç–µ–ª—è –∫–∞–∫ —É—á–∏—Ç–µ–ª—é, —Ç–∞–∫ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
    if user.role in ['—É—á–∏—Ç–µ–ª—å', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫']:
        bot.edit_message_text("üë®‚Äçüè´ –ü–∞–Ω–µ–ª—å —É—á–∏—Ç–µ–ª—è:", 
                             chat_id=user_id, 
                             message_id=call.message.message_id, 
                             reply_markup=teacher_panel_markup())
    else:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —É—á–∏—Ç–µ–ª—è.")
def main_menu_markup(user_id: int) -> types.InlineKeyboardMarkup:
    user = get_user(user_id)
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
    buttons = [
        types.InlineKeyboardButton("üìö –ó–∞–¥–∞–Ω–∏—è", callback_data="tasks_menu"),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics"),
        types.InlineKeyboardButton("üìÇ –†–∞–±–æ—Ç—ã", callback_data="works"),
        types.InlineKeyboardButton("üì® –†–µ–ø–æ—Ä—Ç—ã", callback_data="reports"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")
    ]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É—á–∏—Ç–µ–ª—è
    if check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        buttons.append(types.InlineKeyboardButton("üë®‚Äçüè´ –ü–∞–Ω–µ–ª—å —É—á–∏—Ç–µ–ª—è", callback_data="teacher_panel"))
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    if check_access(user_id, '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):
        buttons.append(types.InlineKeyboardButton("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", callback_data="dev_panel"))
    
    markup.add(*buttons)
    return markup
@bot.callback_query_handler(func=lambda call: call.data == 'about_bot')
def about_bot(call: types.CallbackQuery):
    user_id = call.from_user.id
    bot.edit_message_text(
        "ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n"
        "–≠—Ç–æ —É—á–µ–±–Ω—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏, —Ä–∞–±–æ—Ç–∞–º–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º –º–µ–∂–¥—É —É—á–µ–Ω–∏–∫–∞–º–∏ –∏ —É—á–∏—Ç–µ–ª—è–º–∏.\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç\n"
        "- –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏\n"
        "- –°–∏—Å—Ç–µ–º–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤\n"
        "- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç\n",
        chat_id=user_id,
        message_id=call.message.message_id,
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
    )

@bot.callback_query_handler(func=lambda call: call.data == 'send_report')
def send_report(call: types.CallbackQuery):
    user_id = call.from_user.id
    msg = bot.send_message(user_id, "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–µ–ø–æ—Ä—Ç –∏–ª–∏ –∂–∞–ª–æ–±—É:")
    bot.register_next_step_handler(msg, process_send_report)

def process_send_report(message: types.Message):
    user_id = message.from_user.id
    report_text = message.text.strip()
    if len(report_text) < 10:
        msg = bot.send_message(user_id, "‚ùå –¢–µ–∫—Å—Ç —Ä–µ–ø–æ—Ä—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
        bot.register_next_step_handler(msg, process_send_report)
        return
    
    cursor.execute("INSERT INTO reports (user_id, text, status) VALUES (?, ?, ?)", 
                  (user_id, report_text, "–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"))
    conn.commit()
    
    bot.send_message(user_id, "‚úÖ –í–∞—à —Ä–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.", reply_markup=main_menu_markup(user_id))
    notify_about_new_report(user_id, report_text)
@bot.callback_query_handler(func=lambda call: call.data == 'my_works')
def show_my_works(call: types.CallbackQuery):
    user_id = call.from_user.id
    cursor.execute("""
        SELECT w.work_id, w.file_path, w.status, w.created_at 
        FROM works w
        WHERE w.user_id = ?
        ORDER BY w.created_at DESC
    """, (user_id,))
    works = cursor.fetchall()
    if not works:
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç.")
        return
    
    message = "üìã –í–∞—à–∏ —Ä–∞–±–æ—Ç—ã:\n"
    for work in works:
        work_id, file_path, status, created_at = work
        file_name = os.path.basename(file_path)
        message += (
            f"- #{work_id}: {file_name}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {created_at}\n\n"
        )
    
    bot.send_message(user_id, message)

def works_markup(user_id: int) -> types.InlineKeyboardMarkup:
    user = get_user(user_id)
    if not user:
        return types.InlineKeyboardMarkup()
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    if user.role == '—É—á–µ–Ω–∏–∫':
        cursor.execute("SELECT work_id, file_path, status FROM works WHERE user_id = ? ORDER BY created_at DESC", (user_id,))
        works = cursor.fetchall()
        for work_id, file_path, status in works:
            name = os.path.basename(file_path)
            markup.add(types.InlineKeyboardButton(
                f"{name} ({status})", 
                callback_data=f"work_detail_{work_id}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ–∏ —Ä–∞–±–æ—Ç—ã"
        markup.add(types.InlineKeyboardButton("üìã –ú–æ–∏ —Ä–∞–±–æ—Ç—ã", callback_data="my_works"))
        markup.add(types.InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="upload_work"))
    elif user.role == '—É—á–∏—Ç–µ–ª—å':
        markup.add(types.InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–±–æ—Ç", callback_data="view_works"))
        markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—ã", callback_data="check_works"))
    else:
        markup.add(types.InlineKeyboardButton("üìã –ú–æ–∏ —Ä–∞–±–æ—Ç—ã", callback_data="my_works"))
        markup.add(types.InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="upload_work"))
        markup.add(types.InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–±–æ—Ç", callback_data="view_works"))
        markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—ã", callback_data="check_works"))
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return markup
@bot.callback_query_handler(func=lambda call: call.data == 'view_works')
def view_works(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–±–æ—Ç.")
        return
    
    cursor.execute("""
        SELECT w.work_id, u.full_name, w.file_path, w.status, w.created_at 
        FROM works w
        JOIN users u ON w.user_id = u.user_id
        ORDER BY w.created_at DESC
    """)
    works = cursor.fetchall()
    if not works:
        bot.edit_message_text("üìÇ –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç.", 
                             chat_id=user_id, 
                             message_id=call.message.message_id)
        return
    
    message = "üìÇ –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç:\n"
    for work in works:
        work_id, full_name, file_path, status, created_at = work
        file_name = os.path.basename(file_path)
        message += (
            f"- #{work_id} –æ—Ç {full_name}\n"
            f"üìÑ –§–∞–π–ª: {file_name}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {created_at}\n\n"
        )
    
    bot.edit_message_text(message, 
                         chat_id=user_id, 
                         message_id=call.message.message_id, 
                         reply_markup=view_works_markup(works))

def view_works_markup(works: List[Tuple]) -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    for work in works:
        work_id = work[0]
        markup.add(types.InlineKeyboardButton(
            f"–†–∞–±–æ—Ç–∞ #{work_id}", 
            callback_data=f"work_detail_{work_id}"
        ))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="teacher_panel"))
    return markup
@bot.callback_query_handler(func=lambda call: call.data == 'check_works')
def check_works(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—Ç.")
        return
    
    cursor.execute("""
        SELECT w.work_id, u.full_name, w.file_path, w.status, w.created_at 
        FROM works w
        JOIN users u ON w.user_id = u.user_id
        WHERE w.status = '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ'
        ORDER BY w.created_at DESC
    """)
    works = cursor.fetchall()
    if not works:
        bot.send_message(user_id, "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç —Ä–∞–±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return
    
    message = "üìã –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
    for work in works:
        work_id, full_name, file_path, status, created_at = work
        file_name = os.path.basename(file_path)
        message += (
            f"- #{work_id} –æ—Ç {full_name}\n"
            f"üìÅ –§–∞–π–ª: {file_name}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {created_at}\n\n"
        )
    
    bot.send_message(user_id, message, reply_markup=check_works_markup(works))

def check_works_markup(works: List[Tuple]) -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=1)
    for work in works:
        work_id = work[0]
        markup.add(types.InlineKeyboardButton(
            f"–†–∞–±–æ—Ç–∞ #{work_id}", 
            callback_data=f"work_detail_{work_id}"
        ))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="teacher_panel"))
    return markup
def work_detail_markup(work_id: int, user_role: str) -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", callback_data=f"download_{work_id}"))
    
    if user_role in ['—É—á–∏—Ç–µ–ª—å', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫']:
        markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{work_id}"))
        markup.add(types.InlineKeyboardButton("üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{work_id}"))
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="works"))
    return markup
@bot.callback_query_handler(func=lambda call: call.data.startswith('add_comment_'))
def add_comment(call: types.CallbackQuery):
    user_id = call.from_user.id
    work_id = int(call.data.split('_')[2])
    msg = bot.send_message(user_id, f"üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ #{work_id}:")
    bot.register_next_step_handler(msg, lambda m: process_add_comment(m, work_id))

def process_add_comment(message: types.Message, work_id: int):
    user_id = message.from_user.id
    comment = message.text.strip()
    if not comment:
        bot.send_message(user_id, "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    cursor.execute("UPDATE works SET teacher_comment = ? WHERE work_id = ?", (comment, work_id))
    conn.commit()
    bot.send_message(user_id, f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ä–∞–±–æ—Ç–µ #{work_id}.")
    show_work_details(message, work_id)
def teacher_panel_markup() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üìö –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π", callback_data="teacher_task_list"),
        types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="create_task"),
        types.InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="close_task_menu"),
        types.InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data="check_task_menu"),
        types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="delete_task_menu"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    ]
    markup.add(*buttons)
    return markup
@bot.callback_query_handler(func=lambda call: call.data == 'reports')
def handle_reports(call: types.CallbackQuery):
    user_id = call.from_user.id
    user = get_user(user_id)
    if not user:
        bot.send_message(user_id, "‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.")
        return
    if user.role == '—É—á–µ–Ω–∏–∫':
        msg = bot.send_message(user_id, "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–µ–ø–æ—Ä—Ç –∏–ª–∏ –∂–∞–ª–æ–±—É:")
        bot.register_next_step_handler(msg, process_student_report)
    elif user.role in ['—É—á–∏—Ç–µ–ª—å', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫']:
        show_reports_list(call)

@bot.callback_query_handler(func=lambda call: call.data == 'student_list_with_stats')
def show_student_list_with_stats(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤.")
        return
    
    cursor.execute("""
        SELECT u.user_id, u.full_name, u.class, COUNT(w.work_id) AS total_works,
               SUM(CASE WHEN w.status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ' THEN 1 ELSE 0 END) AS checked_works
        FROM users u
        LEFT JOIN works w ON u.user_id = w.user_id
        WHERE u.role = '—É—á–µ–Ω–∏–∫'
        GROUP BY u.user_id
    """)
    students = cursor.fetchall()
    
    if not students:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.")
        return
    
    bot.send_message(
        user_id, 
        "üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:", 
        reply_markup=students_list_markup(students)
    )

def students_list_markup(students: List[Tuple]) -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=1)
    for student in students:
        student_id, full_name, class_name, total_works, checked_works = student
        stats = f"{checked_works}/{total_works}" if total_works else "–ù–µ—Ç —Ä–∞–±–æ—Ç"
        button_text = f"{full_name} ({class_name or '–ù–µ —É–∫–∞–∑–∞–Ω'}) - {stats}"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f"student_detail_{student_id}"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="teacher_panel"))
    return markup
@bot.callback_query_handler(func=lambda call: call.data.startswith('student_detail_'))
def student_detail(call: types.CallbackQuery):
    user_id = call.from_user.id
    student_id = int(call.data.split('_')[2])
    
    cursor.execute("""
        SELECT u.full_name, u.class, COUNT(w.work_id) AS total_works, 
               SUM(CASE WHEN w.status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ' THEN 1 ELSE 0 END) AS checked_works
        FROM users u
        LEFT JOIN works w ON u.user_id = w.user_id
        WHERE u.user_id = ? AND u.role = '—É—á–µ–Ω–∏–∫'
        GROUP BY u.user_id
    """, (student_id,))
    student = cursor.fetchone()
    
    if not student:
        bot.send_message(user_id, "‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    full_name, class_name, total_works, checked_works = student
    stats = f"{checked_works}/{total_works}" if total_works else "–ù–µ—Ç —Ä–∞–±–æ—Ç"
    
    bot.send_message(
        user_id, 
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ:\n"
        f"–ò–º—è: {full_name}\n"
        f"–ö–ª–∞—Å—Å: {class_name or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç: {stats}",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_list_with_stats")
        )
    )
def dev_panel_markup() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üë®‚Äçüè´ –ù–∞–∑–Ω–∞—á–∏—Ç—å —É—á–∏—Ç–µ–ª—è", callback_data="assign_teacher"),
        types.InlineKeyboardButton("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏", callback_data="ban_management"),
        types.InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data"),
        types.InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="import_data"),
        types.InlineKeyboardButton("üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="full_stats"),
        types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç–æ–≤", callback_data="reports"),  # –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–∏—Ç —Ä–µ–ø–æ—Ä—Ç—ã
        types.InlineKeyboardButton("üìö –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="teacher_task_list"),  # –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–∏—Ç –∑–∞–¥–∞–Ω–∏—è
        types.InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤", callback_data="student_list"),  # –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–∏—Ç —É—á–µ–Ω–∏–∫–æ–≤
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    ]
    markup.add(*buttons)
    return markup
@bot.callback_query_handler(func=lambda call: call.data == 'full_stats')
def full_statistics(call):
    user_id = call.from_user.id
    if not check_access(user_id, '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
        SELECT COUNT(*), role 
        FROM users 
        GROUP BY role
    """)
    user_stats = cursor.fetchall()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç
    cursor.execute("""
        SELECT COUNT(*), status 
        FROM works 
        GROUP BY status
    """)
    work_stats = cursor.fetchall()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤
    cursor.execute("""
        SELECT COUNT(*), status 
        FROM reports 
        GROUP BY status
    """)
    report_stats = cursor.fetchall()

    stats = (
        "üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    )
    for count, role in user_stats:
        stats += f"- {role}: {count}\n"

    stats += "\nüìÇ –†–∞–±–æ—Ç—ã:\n"
    for count, status in work_stats:
        stats += f"- {status}: {count}\n"

    stats += "\nüì® –†–µ–ø–æ—Ä—Ç—ã:\n"
    for count, status in report_stats:
        stats += f"- {status}: {count}\n"

    bot.send_message(user_id, stats)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data == 'assign_teacher')
def assign_teacher(call):
    user_id = call.from_user.id
    if not check_access(user_id, '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è.")
        return

    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—á–∏—Ç–µ–ª–µ–º:")
    bot.register_next_step_handler(msg, process_assign_teacher)

def process_assign_teacher(message: types.Message):
    user_id = message.from_user.id
    target_id = message.text.strip()
    
    try:
        target_id = int(target_id)
    except ValueError:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (target_id,))
    if not cursor.fetchone():
        bot.send_message(user_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å "—É—á–∏—Ç–µ–ª—å"
    cursor.execute("UPDATE users SET role = '—É—á–∏—Ç–µ–ª—å' WHERE user_id = ?", (target_id,))
    conn.commit()
    
    bot.send_message(user_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–∞–∑–Ω–∞—á–µ–Ω —É—á–∏—Ç–µ–ª–µ–º.")
    bot.send_message(target_id, "‚úÖ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —É—á–∏—Ç–µ–ª–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
def show_user_statistics(call):
    user_id = call.from_user.id

    # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        SELECT username , full_name, class, role, created_at 
        FROM users 
        WHERE user_id = ?
    """, (user_id,))
    user_info = cursor.fetchone()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not user_info:
        bot.send_message(user_id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.")
        return

    # –†–∞–∑–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username , full_name, class_name, role, created_at = user_info

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –∏–∑ full_name
    name_parts = full_name.split()
    first_name = name_parts[0] if len(name_parts) > 0 else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    last_name = name_parts[1] if len(name_parts) > 1 else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç
    cursor.execute("""
        SELECT COUNT(*), status 
        FROM works 
        WHERE user_id = ? 
        GROUP BY status
    """, (user_id,))
    works_stats = cursor.fetchall()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤
    cursor.execute("""
        SELECT COUNT(*), status 
        FROM reports 
        WHERE user_id = ? 
        GROUP BY status
    """, (user_id,))
    reports_stats = cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    stats = (
        f"üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è: {username}\n"
        f"–§–∞–º–∏–ª–∏—è: {first_name}\n"
        f"–†–æ–ª—å: {role or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"–ö–ª–∞—Å—Å: {class_name or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç:\n"
    )

    for count, status in works_stats:
        stats += f"- {status}: {count}\n"

    stats += "\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤:\n"
    for count, status in reports_stats:
        stats += f"- {status}: {count}\n"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.send_message(user_id, stats)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –Ω–æ–≤–æ–º —Ä–µ–ø–æ—Ä—Ç–µ
def notify_about_new_report(user_id, report_text):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    cursor.execute("SELECT user_id FROM users WHERE role IN ('—É—á–∏—Ç–µ–ª—å', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫')")
    admins = cursor.fetchall()

    for admin_id, in admins:
        try:
            bot.send_message(admin_id, f"üö® –ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n{report_text}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
@bot.callback_query_handler(func=lambda call: call.data == 'broadcast')
def broadcast_menu(call):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_users"),
        types.InlineKeyboardButton("üì¢ –í –≥—Ä—É–ø–ø—É", callback_data="broadcast_group"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="teacher_panel")
    ]
    markup.add(*buttons)
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:", chat_id=user_id, message_id=call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['broadcast_users', 'broadcast_group'])
def process_broadcast_type(call):
    user_id = call.from_user.id
    broadcast_type = call.data.split('_')[1]
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    bot.register_next_step_handler(msg, lambda m: process_broadcast(m, broadcast_type))

def process_broadcast(message, broadcast_type):
    user_id = message.from_user.id
    broadcast_text = message.text
    if broadcast_type == "users":
        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()
        for user in users:
            try:
                bot.send_message(user[0], f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{broadcast_text}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
        bot.send_message(user_id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!", 
                         reply_markup=main_menu_markup(user_id))
    elif broadcast_type == "group":
        try:
            bot.send_message(api.CHANNEL_ID, f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{broadcast_text}")
            bot.send_message(user_id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É!", 
                             reply_markup=main_menu_markup(user_id))
        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {str(e)}", 
                             reply_markup=main_menu_markup(user_id))
@bot.callback_query_handler(func=lambda call: call.data == 'manage_classes')
def manage_classes_menu(call):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞–º–∏.")
        return

    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å", callback_data="add_class"),
        types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å", callback_data="remove_class"),
        types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤", callback_data="list_classes"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="teacher_panel")
    ]
    markup.add(*buttons)
    bot.edit_message_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞–º–∏:", chat_id=user_id, message_id=call.message.message_id, reply_markup=markup)
@bot.callback_query_handler(func=lambda call: call.data == 'remove_class')
def remove_class(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤.")
        return
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(msg, process_remove_class)
def process_remove_class(message: types.Message):
    user_id = message.from_user.id
    class_name = message.text.strip()
    cursor.execute("SELECT class_id FROM classes WHERE class_name = ?", (class_name,))
    class_data = cursor.fetchone()
    if not class_data:
        bot.send_message(user_id, f"‚ùå –ö–ª–∞—Å—Å '{class_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    class_id = class_data[0]
    cursor.execute("DELETE FROM classes WHERE class_id = ?", (class_id,))
    conn.commit()
    bot.send_message(user_id, f"‚úÖ –ö–ª–∞—Å—Å '{class_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=main_menu_markup(user_id))
@bot.callback_query_handler(func=lambda call: call.data == 'add_class')
def add_class(call):
    user_id = call.from_user.id
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞:")
    bot.register_next_step_handler(msg, process_add_class)

def process_add_class(message):
    user_id = message.from_user.id
    class_name = message.text.strip()
    cursor.execute("INSERT OR IGNORE INTO classes (class_name) VALUES (?)", (class_name,))
    conn.commit()
    bot.send_message(user_id, f"‚úÖ –ö–ª–∞—Å—Å '{class_name}' –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=main_menu_markup(user_id))

@bot.callback_query_handler(func=lambda call: call.data == 'list_classes')
def list_classes(call):
    user_id = call.from_user.id
    cursor.execute("SELECT class_name FROM classes ORDER BY class_name")
    classes = cursor.fetchall()

    if not classes:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤.")
        return

    message = "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤:\n"
    for class_name in classes:
        message += f"- {class_name[0]}\n"

    bot.send_message(user_id, message)
@bot.callback_query_handler(func=lambda call: call.data == 'ban_user')
def ask_user_id_to_ban(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
    bot.register_next_step_handler(msg, process_ban_user)

def process_ban_user(message: types.Message):
    user_id = message.from_user.id
    target_id = message.text.strip()
    try:
        target_id = int(target_id)
    except ValueError:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (target_id,))
    if not cursor.fetchone():
        bot.send_message(user_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if target_id == user_id:
        bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è.")
        return

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("UPDATE users SET is_blocked = 1 WHERE user_id = ?", (target_id,))
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(target_id, "‚õî –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    bot.send_message(user_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", 
                     reply_markup=main_menu_markup(user_id))
@bot.callback_query_handler(func=lambda call: call.data == 'unban_user')
def ask_user_id_to_unban(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
    bot.register_next_step_handler(msg, process_unban_user)

def process_unban_user(message: types.Message):
    user_id = message.from_user.id
    target_id = message.text.strip()
    try:
        target_id = int(target_id)
    except ValueError:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (target_id,))
    if not cursor.fetchone():
        bot.send_message(user_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("UPDATE users SET is_blocked = 0 WHERE user_id = ?", (target_id,))
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(target_id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    bot.send_message(user_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", 
                     reply_markup=main_menu_markup(user_id))

@bot.callback_query_handler(func=lambda call: call.data == 'banned_list')
def banned_list(call):
    user_id = call.from_user.id
    cursor.execute("SELECT user_id, full_name FROM users WHERE is_blocked = 1")
    banned_users = cursor.fetchall()

    if not banned_users:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    message = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user in banned_users:
        message += f"- ID: {user[0]}, –ò–º—è: {user[1]}\n"

    bot.send_message(user_id, message)
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    if is_user_blocked(user_id):
        bot.send_message(user_id, "‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    user = get_user(user_id)
    if not user:
        bot.send_message(user_id, "‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.")
        return
    
    try:
        if call.data == "main_menu":
            bot.edit_message_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
                                chat_id=user_id, 
                                message_id=call.message.message_id, 
                                reply_markup=main_menu_markup(user_id))
        elif call.data == "statistics":
            show_user_statistics(call)
        elif call.data == "works":
            bot.edit_message_text("üìÇ –í–∞—à–∏ —Ä–∞–±–æ—Ç—ã:", 
                                chat_id=user_id, 
                                message_id=call.message.message_id, 
                                reply_markup=works_markup(user_id))
        elif call.data == "upload_work":
            msg = bot.send_message(user_id, "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –≤–∞—à–µ–π —Ä–∞–±–æ—Ç–æ–π:")
            bot.register_next_step_handler(msg, process_work_upload)
        elif call.data.startswith("work_detail_"):
            work_id = int(call.data.split("_")[2])
            show_work_details(call, work_id)
        elif call.data.startswith("download_"):
            work_id = int(call.data.split("_")[1])
            download_work(user_id, work_id)
        elif call.data.startswith("change_status_"):
            work_id = int(call.data.split("_")[2])
            change_work_status(call, work_id)
        elif call.data == "teacher_panel":
            bot.edit_message_text("üë®‚Äçüè´ –ü–∞–Ω–µ–ª—å —É—á–∏—Ç–µ–ª—è:", 
                                chat_id=user_id, 
                                message_id=call.message.message_id, 
                                reply_markup=teacher_panel_markup())
        elif call.data == "dev_panel":
            bot.edit_message_text("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:", 
                                chat_id=user_id, 
                                message_id=call.message.message_id, 
                                reply_markup=dev_panel_markup())
        elif call.data == "export_data":
            if check_access(user_id, '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):
                export_data(user_id)
            else:
                bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö.")
        elif call.data == "ban_management":
            if check_access(user_id, '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):
                ban_management_menu(call)
            else:
                bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏.")
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"Error in callback handler: {e}")
def teacher_tasks_menu_markup() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="create_task"),
        types.InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="close_task_menu"),
        types.InlineKeyboardButton("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data="check_task_menu"),
        types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="delete_task_menu"),
        types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π", callback_data="teacher_task_list"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="teacher_panel")
    ]
    markup.add(*buttons)
    return markup
def teacher_task_actions_markup(task_id: int) -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"close_task_{task_id}"),
        types.InlineKeyboardButton("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data=f"view_answers_{task_id}")
    ]
    markup.add(*buttons)
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="teacher_works"))
    return markup
@bot.callback_query_handler(func=lambda call: call.data.startswith('close_task_'))
def close_task(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞–Ω–∏–π.")
        return
    
    task_id = int(call.data.split('_')[2])
    cursor.execute("UPDATE tasks SET status = 'closed' WHERE task_id = ?", (task_id,))
    conn.commit()
    
    bot.send_message(user_id, f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{task_id} –∑–∞–∫—Ä—ã—Ç–æ.", reply_markup=teacher_tasks_menu_markup())
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–±–æ—Ç–∞–º–∏
def process_work_upload(message: types.Message):
    user_id = message.from_user.id
    
    if not message.document:
        msg = bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.")
        bot.register_next_step_handler(msg, process_work_upload)
        return
    
    try:
        file_id = message.document.file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        file_ext = message.document.file_name.split('.')[-1]
        file_name = f"work_{user_id}_{timestamp}.{file_ext}"
        file_path = os.path.join(WORKS_FOLDER, "pending", file_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        with open(file_path, 'wb') as f:
            f.write(downloaded_file)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO works (user_id, file_path, status) VALUES (?, ?, ?)",
            (user_id, file_path, "–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
        )
        conn.commit()
        
        bot.send_message(user_id, "‚úÖ –†–∞–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!", reply_markup=main_menu_markup(user_id))
    
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–±–æ—Ç—ã: {str(e)}")

def show_work_details(call: types.CallbackQuery, work_id: int):
    user_id = call.from_user.id
    cursor.execute("""
        SELECT w.work_id, u.full_name, w.file_path, w.status, w.created_at, w.teacher_comment 
        FROM works w
        JOIN users u ON w.user_id = u.user_id
        WHERE w.work_id = ?
    """, (work_id,))
    work = cursor.fetchone()
    if not work:
        bot.send_message(user_id, "‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    work_id, full_name, file_path, status, created_at, teacher_comment = work
    message = (
        f"üìã –†–∞–±–æ—Ç–∞ #{work_id}\n"
        f"üë§ –ê–≤—Ç–æ—Ä: {full_name}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üìÖ –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {created_at}\n"
    )
    if teacher_comment:
        message += f"‚ùóÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—á–∏—Ç–µ–ª—è: {teacher_comment}\n"
    
    bot.edit_message_text(
        message,
        chat_id=user_id,
        message_id=call.message.message_id,
        reply_markup=work_detail_markup(work_id, get_user(user_id).role)
    )
def download_work(user_id: int, work_id: int):
    cursor.execute("SELECT file_path FROM works WHERE work_id = ?", (work_id,))
    file_path = cursor.fetchone()[0]
    if not os.path.exists(file_path):
        bot.send_message(user_id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    with open(file_path, 'rb') as f:
        bot.send_document(user_id, f, caption=f"–§–∞–π–ª —Ä–∞–±–æ—Ç—ã #{work_id}")

def change_work_status(call: types.CallbackQuery, work_id: int):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç.")
        return

    cursor.execute("SELECT file_path, status FROM works WHERE work_id = ?", (work_id,))
    work = cursor.fetchone()
    if not work:
        bot.send_message(user_id, "‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    current_file_path, current_status = work
    markup = types.InlineKeyboardMarkup(row_width=1)
    statuses = ["–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ", "–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏", "–£–¥–∞–ª–µ–Ω–æ"]

    for status in statuses:
        if status != current_status:
            markup.add(types.InlineKeyboardButton(status, callback_data=f"set_status_{work_id}_{status}"))

    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"work_detail_{work_id}"))
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", chat_id=user_id, message_id=call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('set_status_'))
def process_status_change(call: types.CallbackQuery):
    user_id = call.from_user.id
    try:
        _, _, work_id, new_status = call.data.split('_', 3)
        work_id = int(work_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        cursor.execute("SELECT file_path FROM works WHERE work_id = ?", (work_id,))
        result = cursor.fetchone()
        if not result:
            bot.send_message(user_id, "‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        current_file_path = result[0]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É
        status_folders = {
            '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ': 'checked',
            '–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏': 'redo',
            '–£–¥–∞–ª–µ–Ω–æ': 'deleted'
        }
        
        if new_status not in status_folders:
            bot.send_message(user_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        new_folder = os.path.join(WORKS_FOLDER, status_folders[new_status])
        os.makedirs(new_folder, exist_ok=True)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
        new_file_name = os.path.basename(current_file_path)
        new_file_path = os.path.join(new_folder, new_file_name)
        os.rename(current_file_path, new_file_path)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            "UPDATE works SET status = ?, file_path = ? WHERE work_id = ?",
            (new_status, new_file_path, work_id)
        )
        conn.commit()
        
        bot.send_message(user_id, f"‚úÖ –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã #{work_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'")
        show_work_details(call, work_id)
        
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
@bot.callback_query_handler(func=lambda call: call.data == 'manage_users')
def manage_users_menu(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_list"),
        types.InlineKeyboardButton("üéì –ù–∞–∑–Ω–∞—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data="assign_student"),
        types.InlineKeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å", callback_data="add_to_class"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="teacher_panel")
    ]
    markup.add(*buttons)
    bot.edit_message_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", chat_id=user_id, message_id=call.message.message_id, reply_markup=markup)
@bot.callback_query_handler(func=lambda call: call.data == 'user_list')
def user_list(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    cursor.execute("""
        SELECT user_id, full_name, role, class, is_blocked 
        FROM users WHERE role != '—É—á–∏—Ç–µ–ª—å' AND role != '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
    """)
    users = cursor.fetchall()
    
    if not users:
        bot.send_message(user_id, "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    message = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user in users:
        user_id, full_name, role, class_name, is_blocked = user
        status = "‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_blocked else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        role = role or "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        class_name = class_name or "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        message += f"- ID: {user_id} | {full_name} | {role} | {class_name} | {status}\n"
    
    bot.send_message(user_id, message, reply_markup=manage_users_markup())

def manage_users_markup() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_list"),
        types.InlineKeyboardButton("üéì –ù–∞–∑–Ω–∞—á–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data="assign_student"),
        types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="block_user"),
        types.InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="unblock_user"),
        types.InlineKeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å", callback_data="add_to_class"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_users")
    ]
    markup.add(*buttons)
    return markup

# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ —É—á–µ–Ω–∏–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == 'assign_student')
def assign_student(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤.")
        return
    
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–º:")
    bot.register_next_step_handler(msg, process_assign_student)

def process_assign_student(message: types.Message):
    admin_id = message.from_user.id
    target_id = message.text.strip()
    
    if not target_id.isdigit():
        bot.send_message(admin_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    target_id = int(target_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (target_id,))
    if not cursor.fetchone():
        bot.send_message(admin_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å —É—á–µ–Ω–∏–∫–∞
    cursor.execute("""
        UPDATE users SET role = '—É—á–µ–Ω–∏–∫' 
        WHERE user_id = ?
    """, (target_id,))
    conn.commit()
    
    bot.send_message(admin_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–∞–∑–Ω–∞—á–µ–Ω —É—á–µ–Ω–∏–∫–æ–º.")
    bot.send_message(target_id, "‚úÖ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —É—á–µ–Ω–∏–∫–æ–º —É—á–∏—Ç–µ–ª–µ–º.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å
@bot.callback_query_handler(func=lambda call: call.data == 'add_to_class')
def add_to_class(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å.")
        return
    
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
    bot.register_next_step_handler(msg, process_add_to_class)

def process_add_to_class(message: types.Message):
    admin_id = message.from_user.id
    data = message.text.strip().split()
    
    if len(data) != 2 or not data[0].isdigit():
        bot.send_message(admin_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ ID –∏ –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return
    
    target_id, class_name = data
    target_id = int(target_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (target_id,))
    if not cursor.fetchone():
        bot.send_message(admin_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
    cursor.execute("SELECT class_name FROM classes WHERE class_name = ?", (class_name,))
    if not cursor.fetchone():
        bot.send_message(admin_id, "‚ùå –¢–∞–∫–æ–π –∫–ª–∞—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–ª–∞—Å—Å
    cursor.execute("""
        UPDATE users SET class = ? 
        WHERE user_id = ?
    """, (class_name, target_id))
    conn.commit()
    
    bot.send_message(admin_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–ª–∞—Å—Å {class_name}.")
    bot.send_message(target_id, f"‚úÖ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–ª–∞—Å—Å {class_name} —É—á–∏—Ç–µ–ª–µ–º.")
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–ø–æ—Ä—Ç–∞–º–∏
@bot.callback_query_handler(func=lambda call: call.data == 'reports')
def handle_reports(call: types.CallbackQuery):
    user_id = call.from_user.id
    user = get_user(user_id)
    
    if not user:
        return
    
    if user.role == '—É—á–µ–Ω–∏–∫':
        msg = bot.send_message(user_id, "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–µ–ø–æ—Ä—Ç –∏–ª–∏ –∂–∞–ª–æ–±—É:")
        bot.register_next_step_handler(msg, process_student_report)
    else:
        show_reports_list(call)

def process_student_report(message: types.Message):
    user_id = message.from_user.id
    report_text = message.text
    
    if not report_text or len(report_text) < 10:
        msg = bot.send_message(user_id, "‚ùå –¢–µ–∫—Å—Ç —Ä–µ–ø–æ—Ä—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
        bot.register_next_step_handler(msg, process_student_report)
        return
    
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO reports (user_id, text, status) VALUES (?, ?, ?)",
        (user_id, report_text, "–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
    )
    conn.commit()
    
    bot.send_message(user_id, "‚úÖ –í–∞—à —Ä–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.", reply_markup=main_menu_markup(user_id))
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª–µ–π –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    notify_about_new_report(user_id, report_text)

def show_reports_list(call: types.CallbackQuery):
    user_id = call.from_user.id
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT r.report_id, r.text, r.status, r.created_at, u.full_name 
        FROM reports r
        JOIN users u ON r.user_id = u.user_id
        ORDER BY r.created_at DESC
    """)
    
    reports = cursor.fetchall()
    
    if not reports:
        bot.edit_message_text("üì® –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–ø–æ—Ä—Ç–æ–≤.",
                            chat_id=user_id,
                            message_id=call.message.message_id)
        return
    
    message = "üì® –°–ø–∏—Å–æ–∫ —Ä–µ–ø–æ—Ä—Ç–æ–≤:\n\n"
    for report in reports:
        report_id, text, status, created_at, user_name = report
        message += (
            f"üîπ <b>#{report_id}</b> –æ—Ç <i>{user_name}</i>\n"
            f"üìÖ {created_at}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    
    bot.edit_message_text(message,
                         chat_id=user_id,
                         message_id=call.message.message_id,
                         parse_mode='HTML',
                         reply_markup=reports_list_markup(reports))

def reports_list_markup(reports: List[Tuple]) -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    for report in reports:
        report_id = report[0]
        markup.add(types.InlineKeyboardButton(
            f"–†–µ–ø–æ—Ä—Ç #{report_id}", 
            callback_data=f"report_detail_{report_id}"
        ))
    
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return markup

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def ban_management_menu(call: types.CallbackQuery):
    user_id = call.from_user.id
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    buttons = [
        types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="ban_user"),
        types.InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="unban_user"),
        types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö", callback_data="banned_list"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="dev_panel")
    ]
    
    markup.add(*buttons)
    bot.edit_message_text("üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏:",
                         chat_id=user_id,
                         message_id=call.message.message_id,
                         reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'ban_user')
def ask_user_id_to_ban(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
    bot.register_next_step_handler(msg, process_ban_user)

def process_ban_user(message: types.Message):
    user_id = message.from_user.id
    target_id = message.text.strip()
    try:
        target_id = int(target_id)
    except ValueError:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (target_id,))
    if not cursor.fetchone():
        bot.send_message(user_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if target_id == user_id:
        bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è.")
        return

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("UPDATE users SET is_blocked = 1 WHERE user_id = ?", (target_id,))
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(target_id, "‚õî –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    bot.send_message(user_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", 
                     reply_markup=main_menu_markup(user_id))
# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ unban_user –∏ banned_list

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
def export_data(user_id: int):
    try:
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT * FROM users")
        users = cursor.fetchall()
        
        cursor.execute("SELECT * FROM works")
        works = cursor.fetchall()
        
        cursor.execute("SELECT * FROM reports")
        reports = cursor.fetchall()
        
        cursor.execute("SELECT * FROM classes")
        classes = cursor.fetchall()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
        data = {
            "users": users,
            "works": works,
            "reports": reports,
            "classes": classes,
            "export_date": get_current_datetime()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        export_file = "bot_data_export.json"
        with open(export_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(export_file, 'rb') as f:
            bot.send_document(user_id, f, caption="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞")
        
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data == 'import_data')
def ask_import_file(call: types.CallbackQuery):
    user_id = call.from_user.id
    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:")
    bot.register_next_step_handler(call.message, process_import_data)

def process_import_data(message: types.Message):
    user_id = message.from_user.id
    
    if not message.document:
        bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.")
        return
    
    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import_file = "bot_data_import.json"
        with open(import_file, 'wb') as f:
            f.write(downloaded_file)
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        with open(import_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor = conn.cursor()
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
        cursor.execute("DELETE FROM works")
        cursor.execute("DELETE FROM reports")
        cursor.execute("DELETE FROM users WHERE role != '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'")
        cursor.execute("DELETE FROM classes")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.executemany("INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?)", data.get("users", []))
        cursor.executemany("INSERT INTO works VALUES (?, ?, ?, ?, ?, ?)", data.get("works", []))
        cursor.executemany("INSERT INTO reports VALUES (?, ?, ?, ?, ?, ?)", data.get("reports", []))
        cursor.executemany("INSERT INTO classes VALUES (?, ?)", data.get("classes", []))
        
        conn.commit()
        bot.send_message(user_id, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
    
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
@bot.callback_query_handler(func=lambda call: call.data.startswith('view_answers_'))
def view_answers(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≤–µ—Ç–æ–≤.")
        return
    
    task_id = int(call.data.split('_')[2])
    cursor.execute("""
        SELECT u.user_id, u.full_name, a.answer_text, a.file_path, a.status 
        FROM answers a
        JOIN users u ON a.user_id = u.user_id
        WHERE a.task_id = ?
    """, (task_id,))
    answers = cursor.fetchall()
    
    if not answers:
        bot.send_message(user_id, f"‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ #{task_id}.")
        return
    
    message = f"üìã –û—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ #{task_id}:\n"
    for answer in answers:
        student_id, full_name, answer_text, file_path, status = answer
        if answer_text:
            answer_info = answer_text[:20] + "..." if len(answer_text) > 20 else answer_text
        elif file_path:
            answer_info = "–§–∞–π–ª –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
        else:
            answer_info = "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"
        
        message += (
            f"- –£—á–µ–Ω–∏–∫: {full_name}\n"
            f"–û—Ç–≤–µ—Ç: {answer_info}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        )
    
    bot.send_message(user_id, message, reply_markup=answers_menu_markup(answers))

def answers_menu_markup(answers: List[Tuple]) -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=1)
    for answer in answers:
        student_id, _, _, _, _ = answer
        markup.add(types.InlineKeyboardButton(
            f"–û—Ç–≤–µ—Ç –æ—Ç —É—á–µ–Ω–∏–∫–∞ ID{student_id}", 
            callback_data=f"answer_detail_{student_id}"
        ))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="teacher_works"))
    return markup
@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_detail_'))
def show_answer_detail(call: types.CallbackQuery):
    user_id = call.from_user.id
    student_id = int(call.data.split('_')[2])
    
    cursor.execute("""
        SELECT u.full_name, t.title, a.answer_text, a.file_path, a.status 
        FROM answers a
        JOIN users u ON a.user_id = u.user_id
        JOIN tasks t ON a.task_id = t.task_id
        WHERE a.user_id = ?
    """, (student_id,))
    answer = cursor.fetchone()
    
    if not answer:
        bot.send_message(user_id, "‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    full_name, task_title, answer_text, file_path, status = answer
    message = (
        f"üìã –û—Ç–≤–µ—Ç –æ—Ç {full_name} –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ '{task_title}':\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {status}\n"
    )
    if answer_text:
        message += f"üìù –û—Ç–≤–µ—Ç: {answer_text}\n"
    elif file_path:
        message += f"üìé –§–∞–π–ª –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n"
    
    bot.edit_message_text(
        message,
        chat_id=user_id,
        message_id=call.message.message_id,
        reply_markup=answer_detail_markup(student_id, status)
    )

def answer_detail_markup(student_id: int, current_status: str) -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=1)
    statuses = ["–ü—Ä–∞–≤–∏–ª—å–Ω–æ", "–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏", "–£–¥–∞–ª–µ–Ω–æ"]
    for status in statuses:
        if status != current_status:
            markup.add(types.InlineKeyboardButton(status, callback_data=f"set_answer_status_{student_id}_{status}"))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="view_student_answers"))
    return markup
@bot.callback_query_handler(func=lambda call: call.data.startswith('set_answer_status_'))
def set_answer_status(call: types.CallbackQuery):
    user_id = call.from_user.id
    if not check_access(user_id, '—É—á–∏—Ç–µ–ª—å'):
        bot.send_message(user_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤.")
        return
    
    _, _, student_id, new_status = call.data.split('_')
    student_id = int(student_id)
    
    cursor.execute("""
        UPDATE answers 
        SET status = ? 
        WHERE user_id = ?
    """, (new_status, student_id))
    conn.commit()
    
    bot.send_message(user_id, f"‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç —É—á–µ–Ω–∏–∫–∞ ID{student_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'.")
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()